// Generated by gencpp from file learning_tf/Num.msg
// DO NOT EDIT!


#ifndef LEARNING_TF_MESSAGE_NUM_H
#define LEARNING_TF_MESSAGE_NUM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learning_tf
{
template <class ContainerAllocator>
struct Num_
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
    : encl(0.0)
    , eclr(0.0)
    , vl(0.0)
    , vr(0.0)
    , angle(0.0)  {
    }
  Num_(const ContainerAllocator& _alloc)
    : encl(0.0)
    , eclr(0.0)
    , vl(0.0)
    , vr(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef float _encl_type;
  _encl_type encl;

   typedef float _eclr_type;
  _eclr_type eclr;

   typedef float _vl_type;
  _vl_type vl;

   typedef float _vr_type;
  _vr_type vr;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::learning_tf::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_tf::Num_<ContainerAllocator> const> ConstPtr;

}; // struct Num_

typedef ::learning_tf::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::learning_tf::Num > NumPtr;
typedef boost::shared_ptr< ::learning_tf::Num const> NumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learning_tf::Num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learning_tf::Num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learning_tf::Num_<ContainerAllocator1> & lhs, const ::learning_tf::Num_<ContainerAllocator2> & rhs)
{
  return lhs.encl == rhs.encl &&
    lhs.eclr == rhs.eclr &&
    lhs.vl == rhs.vl &&
    lhs.vr == rhs.vr &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learning_tf::Num_<ContainerAllocator1> & lhs, const ::learning_tf::Num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learning_tf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::learning_tf::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_tf::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_tf::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_tf::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_tf::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_tf::Num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learning_tf::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd8c1b28c2ce359c8b3645a5240d4d70";
  }

  static const char* value(const ::learning_tf::Num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd8c1b28c2ce359cULL;
  static const uint64_t static_value2 = 0x8b3645a5240d4d70ULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_tf::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learning_tf/Num";
  }

  static const char* value(const ::learning_tf::Num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learning_tf::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 encl\n"
"float32 eclr\n"
"float32 vl\n"
"float32 vr\n"
"float32 angle\n"
;
  }

  static const char* value(const ::learning_tf::Num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learning_tf::Num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encl);
      stream.next(m.eclr);
      stream.next(m.vl);
      stream.next(m.vr);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learning_tf::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learning_tf::Num_<ContainerAllocator>& v)
  {
    s << indent << "encl: ";
    Printer<float>::stream(s, indent + "  ", v.encl);
    s << indent << "eclr: ";
    Printer<float>::stream(s, indent + "  ", v.eclr);
    s << indent << "vl: ";
    Printer<float>::stream(s, indent + "  ", v.vl);
    s << indent << "vr: ";
    Printer<float>::stream(s, indent + "  ", v.vr);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARNING_TF_MESSAGE_NUM_H
